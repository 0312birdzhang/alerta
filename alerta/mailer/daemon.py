import os
import time
import threading
import json
import smtplib
import datetime
import uuid

from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.image import MIMEImage

import pytz

from alerta.common import config
from alerta.common import log as logging
from alerta.common.daemon import Daemon
from alerta.alert import Alert, Heartbeat, severity
from alerta.common.mq import Messaging, MessageHandler


Version = '2.0.0'

LOG = logging.getLogger(__name__)
CONF = config.CONF

_TokenThread = None            # Worker thread object
_Lock = threading.Lock()       # Synchronization lock
TOKEN_LIMIT = 20
_token_rate = 30               # Add a token every 30 seconds
tokens = 20


class MailerMessage(MessageHandler):
    def on_message(self, headers, body):
        global tokens

        LOG.debug("Received: %s", body)

        mailAlert = Alert.parse_alert(body)
        alert = mailAlert.get_body()

        # Only send email for CRITICAL, MAJOR or related alerts
        if (alert['severity'] not in [severity.CRITICAL, severity.MAJOR]
                or alert['previousSeverity'] not in [severity.CRITICAL, severity.MAJOR]):
            return

        if tokens:
            _Lock.acquire()
            tokens -= 1
            _Lock.release()
            LOG.debug('Taken a token, there are only %d left', tokens)
        else:
            LOG.warning('%s : No tokens left, rate limiting this alert', alert['lastReceiveId'])
            return

        text, html = format_mail(alert)
        subject = '[%s] %s' % (alert['status'], alert['summary'])

        LOG.info('%s : Send email to %s', alert['lastReceiveId'], ','.join(CONF.mail_list))
        send_mail(subject, text, html)


def send_mail(subject, text, html):
    msg_root = MIMEMultipart('related')
    msg_root['Subject'] = subject
    msg_root['From'] = CONF.mail_user
    msg_root['To'] = ','.join(CONF.mail_list)
    msg_root.preamble = 'This is a multi-part message in MIME format.'

    msg_alt = MIMEMultipart('alternative')
    msg_root.attach(msg_alt)

    msg_text = MIMEText(text, 'plain')
    msg_alt.attach(msg_text)

    msg_html = MIMEText(html, 'html')
    msg_alt.attach(msg_html)

    # TODO(nsatterl): add graphs to emails
    # if 'graphs' in alert:
    #     msg_img = dict()
    #     for g in alert['graphs']:
    #         try:
    #             image = urllib2.urlopen(g).read()
    #             msg_img[g] = MIMEImage(image)
    #             LOG.debug('graph cid %s', graph_cid[g])
    #             msg_img[g].add_header('Content-ID', '<' + graph_cid[g] + '>')
    #             msg_root.attach(msg_img[g])
    #         except:
    #             pass

    try:
        mail_exchange = smtplib.SMTP(CONF.smtp_host)
        #DEBUG mail_exchange.set_debuglevel(1)
        mail_exchange.sendmail(CONF.mail_user, CONF.mail_list, msg_root.as_string())
        mail_exchange.quit()

    except smtplib.SMTPException, e:
        LOG.error('Failed to send mail to %s:%s : %s', CONF.mail_host, CONF.mail_port, e)


def format_mail(alert):

    # Convert createTime to local time (set TIMEZONE above)
    createTime = datetime.datetime.strptime(alert['createTime'], '%Y-%m-%dT%H:%M:%S.%fZ')
    createTime = createTime.replace(tzinfo=pytz.utc)
    tz = pytz.timezone(CONF.timezone)
    localTime = createTime.astimezone(tz)

    text = ''
    text += '[%s] %s\n' % (alert['status'], alert['summary'])
    text += 'Alert Details\n'
    text += 'Alert ID: %s\n' % (alert['id'])
    text += 'Create Time: %s\n' % (localTime.strftime('%Y/%m/%d %H:%M:%S'))
    text += 'Resource: %s\n' % (alert['resource'])
    text += 'Environment: %s\n' % (','.join(alert['environment']))
    text += 'Service: %s\n' % (','.join(alert['service']))
    text += 'Event Name: %s\n' % (alert['event'])
    text += 'Event Group: %s\n' % (alert['group'])
    text += 'Event Value: %s\n' % (alert['value'])
    text += 'Severity: %s -> %s\n' % (alert['previousSeverity'], alert['severity'])
    text += 'Status: %s\n' % (alert['status'])
    text += 'Text: %s\n' % (alert['text'])
    if 'thresholdInfo' in alert:
        text += 'Threshold Info: %s\n' % (alert['thresholdInfo'])
    if 'duplicateCount' in alert:
        text += 'Duplicate Count: %s\n' % (alert['duplicateCount'])
    if 'moreInfo' in alert:
        text += 'More Info: %s\n' % (alert['moreInfo'])
    text += 'Historical Data\n'
    if 'graphs' in alert:
        for g in alert['graphs']:
            text += '%s\n' % (g)
    text += 'Raw Alert\n'
    text += '%s\n' % (json.dumps(alert))
    text += 'Generated by %s on %s at %s\n' % (
        'alert-mailer.py', os.uname()[1], datetime.datetime.now().strftime("%a %d %b %H:%M:%S"))

    LOG.debug('Raw Text: %s', text)

    html = '<p><table border="0" cellpadding="0" cellspacing="0" width="100%">\n'  # table used to center email
    html += '<tr><td bgcolor="#ffffff" align="center">\n'
    html += '<table border="0" cellpadding="0" cellspacing="0" width="700">\n'     # table used to set width of email
    html += '<tr><td bgcolor="#425470"><p align="center" style="font-size:24px;color:#d9fffd;font-weight:bold;"><strong>[%s] %s</strong></p>\n' % (
        alert['status'], alert['summary'])

    html += '<tr><td><p align="left" style="font-size:18px;line-height:22px;color:#c25130;font-weight:bold;">Alert Details</p>\n'
    html += '<table>\n'
    html += '<tr><td><b>Alert ID:</b></td><td><a href="http://%s:%s/alerta/details.php?id=%s" target="_blank">%s</a></td></tr>\n' % (
        CONF.api_host, CONF.api_port, alert['id'], alert['id'])  # TODO(nsatterl): make web UI console location a CONF option
    html += '<tr><td><b>Create Time:</b></td><td>%s</td></tr>\n' % (localTime.strftime('%Y/%m/%d %H:%M:%S'))
    html += '<tr><td><b>Resource:</b></td><td>%s</td></tr>\n' % (alert['resource'])
    html += '<tr><td><b>Environment:</b></td><td>%s</td></tr>\n' % (','.join(alert['environment']))
    html += '<tr><td><b>Service:</b></td><td>%s</td></tr>\n' % (','.join(alert['service']))
    html += '<tr><td><b>Event Name:</b></td><td>%s</td></tr>\n' % (alert['event'])
    html += '<tr><td><b>Event Group:</b></td><td>%s</td></tr>\n' % (alert['group'])
    html += '<tr><td><b>Event Value:</b></td><td>%s</td></tr>\n' % (alert['value'])
    html += '<tr><td><b>Severity:</b></td><td>%s -> %s</td></tr>\n' % (alert['previousSeverity'], alert['severity'])
    html += '<tr><td><b>Status:</b></td><td>%s</td></tr>\n' % (alert['status'])
    html += '<tr><td><b>Text:</b></td><td>%s</td></tr>\n' % (alert['text'])
    if 'thresholdInfo' in alert:
        html += '<tr><td><b>Threshold Info:</b></td><td>%s</td></tr>\n' % (alert['thresholdInfo'])
    if 'duplicateCount' in alert:
        html += '<tr><td><b>Duplicate Count:</b></td><td>%s</td></tr>\n' % (alert['duplicateCount'])
    if 'moreInfo' in alert:
        html += '<tr><td><b>More Info:</b></td><td><a href="%s">ganglia</a></td></tr>\n' % (alert['moreInfo'])
    html += '</table>\n'
    html += '</td></tr>\n'
    html += '<tr><td><p align="left" style="font-size:18px;line-height:22px;color:#c25130;font-weight:bold;">Historical Data</p>\n'
    if 'graphs' in alert:
        graph_cid = dict()
        for g in alert['graphs']:
            graph_cid[g] = str(uuid.uuid4())
            html += '<tr><td><img src="cid:' + graph_cid[g] + '"></td></tr>\n'
    html += '<tr><td><p align="left" style="font-size:18px;line-height:22px;color:#c25130;font-weight:bold;">Raw Alert</p>\n'
    html += '<tr><td><p align="left" style="font-family: \'Courier New\', Courier, monospace">%s</p></td></tr>\n' % (
        json.dumps(alert))
    html += '<tr><td>Generated by %s on %s at %s</td></tr>\n' % (
        'alert-mailer.py', os.uname()[1], datetime.datetime.now().strftime("%a %d %b %H:%M:%S"))
    html += '</table>'
    html += '</td></tr></table>'
    html += '</td></tr></table>'

    LOG.debug('HTML Text %s', html)

    return text, html


class MailerDaemon(Daemon):
    def run(self):

        self.running = True

        # Start token bucket thread
        _TokenThread = TokenTopUp()
        _TokenThread.start()

        # Connect to message queue
        self.mq = Messaging()
        self.mq.connect(callback=MailerMessage())
        self.mq.subscribe(destination=CONF.outbound_queue)

        while not self.shuttingdown:
            try:
                LOG.debug('Waiting for email messages...')
                time.sleep(CONF.loop_every)

                LOG.debug('Send heartbeat...')
                heartbeat = Heartbeat(version=Version)
                self.mq.send(heartbeat)

            except (KeyboardInterrupt, SystemExit):
                self.shuttingdown = True

        LOG.info('Shutdown request received...')
        self.running = False

        LOG.info('Disconnecting from message broker...')
        self.mq.disconnect()


class TokenTopUp(threading.Thread):
    def __init__(self):
        threading.Thread.__init__(self)
        self.running = False
        self.shuttingdown = False

    def shutdown(self):
        self.shuttingdown = True
        if not self.running:
            return
        self.join()

    def run(self):
        global _token_rate, tokens
        self.running = True

        while not self.shuttingdown:
            if self.shuttingdown:
                break

            if tokens < TOKEN_LIMIT:
                _Lock.acquire()
                tokens += 1
                _Lock.release()

            if not self.shuttingdown:
                time.sleep(_token_rate)

        self.running = False
